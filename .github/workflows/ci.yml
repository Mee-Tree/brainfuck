name: Scala CI

on:
  push:
    tags: [ '*' ]
    branches: [ "master" ]
  pull_request:

jobs:
  format:
    name: Code Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main

      - name: Check formatting
        run: scala-cli format --check .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main

      - name: Run unit tests
        run: scala-cli test .

  example:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main

      - name: Run integration tests
        run: .github/scripts/test.sh

  build-native:
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        include:
          - name: MacOS
            os: macos-latest
            artifact: bf-x86_64-apple-darwin
          - name: Ubuntu
            os: ubuntu-latest
            artifact: bf-x86_64-linux

    name: Graal Build
    runs-on: ${{ matrix.os }}
    needs: [ test, example ]

    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@main
        with:
          power: true

      - name: Build
        run: |
          scala-cli --power package . -o ./out/bf --native-image \
            --graalvm-java-version 21 \
            --graalvm-version 21  \
            --graalvm-args "--verbose" \
            --graalvm-args "--no-fallback" \
            --graalvm-args "--native-image-info" \
            --graalvm-args "-H:+ReportExceptionStackTraces" \
            --graalvm-args "-H:-UseServiceLoaderFeature"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ./out/bf
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ test, example, build-native ]
    if: "startsWith(github.ref, 'refs/tags/')"

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release
        run: .github/scripts/pre-release.sh releases

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          fail_on_unmatched_files: true
          files: releases/*
          token: ${{ secrets.GITHUB_TOKEN }}
